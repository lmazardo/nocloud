#!/usr/bin/env bash

usage() {
  echo "$@" >&2
  echo "usage : $(basename $0) -m <VM_NAME> [ -g <GROUP> [ -t <TYPE> ] ]
   or : $(basename $0) -c <VM_NAME> [ -g <GROUP> [ -t <TYPE> ] ]
   or : $(basename $0) -T <VM_NAME>
   or : $(basename $0) -s -g <GROUP> [ -d ]
  Manages running VMs
  -m : connects to the qemu console of a vm
  -c : connects to the vm console
  -g : restrict selection to this group
  -t : restrict selection to this type
  -T : launch a template
  -s : stop group
  -d : when stopping group, destroy vms
  -h : display this help" >&2
  exit
}

realMe=$(readlink -e $0)
realDir=$(dirname ${realMe})
libDir=../lib
libName=cm_lib
[ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
[ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

mode=0
modeName=
vmName=
groupName="*"
subGroupName="*"
stopDestroy=0
while getopts m:c:sg:t:T:dh name
do
  case $name in
    m)
      vmName="$OPTARG"
      modeName="manage"
      mode=$((mode+1))
      ;;
    c)
      vmName="$OPTARG"
      modeName="console"
      mode=$((mode+1))
      ;;
    s)
      modeName="stop"
      mode=$((mode+1))
      ;;
    g) groupName="$OPTARG" ;;
    t) subGroupName="$OPTARG" ;;
    T) vmName="$OPTARG"
       modeName="template"
       mode=$((mode+1))
       ;;
    d) stopDestroy=1 ;;
    h) usage ;;
  esac
done
shift $(($OPTIND-1))

[ ${mode} -eq 0 ] && usage "One mode must be specified between -m, -s, -c and -T"
[ ${mode} -gt 1 ] && usage "Only one mode to specify between -m, -s, -c and -T"

case ${modeName} in
  "manage")
    [ -z ${vmName} ] && usage "VM name is mandatory"
    vm_running "${groupName}" "${subGroupName}" | grep "^${vmName}" >/dev/null || usage "no VM runnning with that name"
    port=$(vm_console_port "${vmName}")
    telnet localhost $port
    ;;
  "console")
    [ -z ${vmName} ] && usage "VM name is mandatory"
    vm_running "${groupName}" "${subGroupName}" | grep "^${vmName}" >/dev/null || usage "no VM runnning with that name"
    port=$(vm_spice_port "${vmName}")
    spicy -h localhost -p $port -w ${vmSpicePassword} --class=qemu-system-${vmSystemType} >/dev/null 2>&1 &
    ;;
  "template")
    [ -z ${vmName} ] && usage "VM name is mandatory"
    vmGroup=${vmCreateGroup}
    eval $(grep "^vmDisk=" ${vmBaseDir}/${vmGroup}/${vmName}/${vmName}.conf)
    chmod +w ${vmBaseDir}/${vmDisk}
    is_vm_running ${vmName} ${vmGroup} > /dev/null && usage "Machine is already running" || vm_run ${vmName} ${vmGroup}
    ;;
  "stop")
    [ "${groupName}" == "*" ] && usage "specifying a group name is mandatory to stop a group"
    [ "${groupName}" == "${vmCreateGroup}" ] && usage "can't drop ${vmCreateGroup}"
    vm_running "${groupName}" "${subGroupName}" | while read vmName vmGroup vmIp
    do
      vmSubGroup=$(echo ${vmGroup} | cut -d "/" -f 2)
      vmGroup=$(echo ${vmGroup} | cut -d "/" -f 1)
      vm_stop ${vmName} ${vmGroup} ${vmSubGroup}
    done
    [ $stopDestroy -eq 1 ] && vm_group_destroy ${groupName}
    ;;
esac
