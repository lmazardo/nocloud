#!/usr/bin/env bash

usage() {
  echo "$@" >&2
  echo "usage : $(basename $0) [options]
  -g <GROUP> : group in which the newly created vm will be (default ${vmGroup})
  -t <TYPE> : subgroup definition (default none)
              ansible playbook TYPE.yml will be applied. Not yet implemented.
  -h : display this help" >&2
  exit
}

realMe=$(readlink -e $0)
realDir=$(dirname ${realMe})
libDir=../lib
libName=cm_lib
[ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
[ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

vmSubGroup=
while getopts n:C:g:t:h name
do
  case $name in
    g) vmGroup="$OPTARG" ;;
    t) vmSubGroup="$OPTARG" ;;
    h) usage ;;
  esac
done
shift $(($OPTIND-1))

groups=$(ls ${vmBaseDir} | grep -v "${vmCreateGroup}")
echo ${groups} | tr ' ' '\n' | grep "^${vmGroup}$" >/dev/null || usage "${vmGroup} is no known group"

subGroups=$(ls ${vmBaseDir}/${vmGroup})
[ -z "${subGroups}" ] && usage "no subGroup for group ${vmGroup}"
if [ -n "${vmSubGroup}" ] ; then
  echo ${subGroups} | tr ' ' '\n' | grep "^${vmSubGroup}$" >/dev/null || usage "${vmSubGroup} is no known subgroup of ${vmGroup}"
  subGroups=${vmSubGroup}
fi

for subGroup in ${subGroups}
do
  for vmName in $(ls ${vmBaseDir}/${vmGroup}/${subGroup})
  do
    vm_run ${vmName} ${vmGroup}/${subGroup} none
  done
done
