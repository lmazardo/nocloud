#!/usr/bin/env bash

stopSignal=SIGUSR1

usage() {
  echo "$@" >&2
  echo "usage : $(basename $0) -f <FILE> | -r <GROUP> | -s <GROUP>
  -f <FILE> : instanciate servers based on a configuration file. View documentation for file format.
  -r : do not create new VMs and run the ones that had been previously kept in the specified group.
  -s : stop a running pf by sending it ${stopSignal} (see NOTE below)
  -h : display this help
  NOTE : SIGINT (or ^C) will stop all the managed VMs and will then destoy them. ${stopSignal} will stop and quit as well, but will leave the machiness in place for you to relaunch then at will (that's what the -r option is for)." >&2
  exit
}

stop_all() {
  vms=$(vm_running "${vmGroup}" "*" | cut -d ' ' -f 1 | xargs)
  log "My vms are currently : "
  for vm in ${vms} ; do
    log " - ${vm}"
  done
  for vm in ${vms} ; do
    log "shutting down ${vm}"
    vm_stop ${vm} ${vmGroup} $(vm_type ${vm})
  done
}

stop_and_keep_all() {
  log "I am being told to shut down."
  stop_all
  log "Good bye !"
  exit
}

stop_and_destroy_all() {
  log "I am being told to shut down and destroy all running VMs."
  stop_all
  log "removing files"
  rm -r ${vmBaseDir}/${vmGroup}
  log "Good bye !"
  exit
}

realMe=$(readlink -e $0)
realDir=$(dirname ${realMe})
libDir=../lib
libName=cm_lib
[ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
[ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

vmName=
while getopts f:r:s:h name
do
  case $name in
    f) groupConfFile="$OPTARG" ;;
    r) groupStored="$OPTARG" ;;
    s) groupStop="$OPTARG" ;;
    h) usage ;;
  esac
done
shift $(($OPTIND-1))

optCount=0
[ -z "${groupConfFile}" ] || optCount=$((optCount+1))
[ -z "${groupStored}" ] || optCount=$((optCount+1))
[ -z "${groupStop}" ] || optCount=$((optCount+1))
[ ${optCount} -ne 1 ] && usage "One (and only one) option must be specified."

if [ -n "${groupStop}" ] ; then
  pkill -${stopSignal} -f "$(basename ${realMe}) -[rf] ${groupStop}"
  exit
fi

if [ -n "${groupConfFile}" ] ; then
  vmGroup=$(basename "${groupConfFile}" | sed 's/\.[^\.]*$//')
fi

if [ -n "${groupStored}" ] ; then
  vmGroup=${groupStored}
fi

log "I will be managing the ${vmGroup} group"

trap 'stop_and_destroy_all' SIGINT SIGTERM
trap 'stop_and_keep_all' ${stopSignal}

vms=$(vm_running "${vmGroup}" "*" | cut -d ' ' -f 1 | xargs)
if [ -n "${vms}" ] ; then
  log "${vmGroup} is not empty !"
  for vm in ${vms} ; do
    log "${vm} is of $(vm_type ${vm}) type in $(vm_group ${vm}) group"
  done
fi

if [ -n "${groupConfFile}" ] ; then
  for confLine in $(cat ${groupConfFile}) ; do
    vmName=$(echo "${confLine}" | cut -d : -f 1)
    vmCount=$(echo "${confLine}" | cut -d : -f 2)
    vmSubGroup=$(echo "${confLine}" | cut -d : -f 3)
    vmOpts=$(echo "${confLine}" | cut -d : -f 4 | tr ";" " ")
    vmSpawned=$(vm_instantiate ${vmName} ${vmCount} ${vmGroup} ${vmSubGroup} "${vmOpts}")
    for vm in $(echo "${vmSpawned}" | tr -s '\n ' '  ') ; do
      log "${vm} of $(vm_type ${vm}) type has been spawned in $(vm_group ${vm}) group"
      vms="${vms} ${vm}"
    done
  done
fi

if [ -n "${groupStored}" ] ; then
  groups=$(ls ${vmBaseDir} | grep -v "${vmCreateGroup}")
  echo ${groups} | tr ' ' '\n' | grep "^${vmGroup}$" >/dev/null || usage "${vmGroup} is no known group"
  subGroups=$(ls ${vmBaseDir}/${vmGroup})
  [ -z "${subGroups}" ] && usage "no subGroup for group ${vmGroup}"
  for subGroup in ${subGroups}
  do
    for vmName in $(ls ${vmBaseDir}/${vmGroup}/${subGroup})
    do
      vm_run ${vmName} ${vmGroup}/${subGroup} none
      log "${vmName} of $(vm_type ${vmName}) type has been spawned in $(vm_group ${vmName}) group"
      vms="${vms} ${vmName}"
    done
  done
fi

vmsWithoutIp=${vms}
while [ -n "${vms}" ] ; do
  if [ -n "${vmsWithoutIp}" ] ; then
    for vmWithoutIp in ${vmsWithoutIp} ; do
      ip=$(vm_running "${vmGroup}" "*" | grep ${vmWithoutIp} | cut -d ' ' -f 3 )
      if [ -n "${ip}" ] ; then
        log "${vmWithoutIp} has IP ${ip}"
        vmsWithoutIp=$(echo "${vmsWithoutIp}" | sed "s/ *${vmWithoutIp} */ /" | sed -r 's/^ *(.*) *$/\1/')
      fi
    done
  fi
  for vm in ${vms} ; do
    if [ -z "$(vm_running "${vmGroup}" "*" | grep ${vm})" ] ; then
      log "${vm} has vanished..."
      vms=$(echo "${vms}" | sed "s/ *${vm} */ /;s/^ *//;s/ *$//")
    fi
  done
  for vm in $(vm_running "${vmGroup}" "*" | cut -d ' ' -f 1) ; do
    if [ $(echo "${vms}" | tr -s ' ' '\n' | grep ${vm} | wc -l) -eq 0 ] ; then
      log "${vm} has joined the group from outer space."
      vms="${vms} ${vm}"
      vmsWithoutIp="${vmsWithoutIp} ${vm}"
    fi
  done
  sleep 1
done

log "All of my machines have gone."
log "I quit."
