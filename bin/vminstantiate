#!/usr/bin/env bash

usage() {
  echo "$@" >&2
  echo "usage : $(basename $0) -n <VM_NAME> -C <COUNT> [options]
or : $(basename $0) -f <FILE>
  -n <VM_NAME> : the name of the template to use (mandatory)
  -C <COUNT> : number of clones to create (default ${vmCount})
  -g <GROUP> : group in which the newly created vm will be (default ${vmGroup})
  -t <TYPE> : subgroup definition (default ${vmSubGroup})
              ansible playbook TYPE.yml will be applied. Not yet implemented.
  -f <FILE> : instanciate servers based on a configuration file. View documentation for file format.
  -h : display this help" >&2
  exit
}

realMe=$(readlink -e $0)
realDir=$(dirname ${realMe})
libDir=../lib
libName=cm_lib
[ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
[ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

vmName=
while getopts n:C:g:t:f:h name
do
  case $name in
    n) vmName="$OPTARG" ;;
    C) vmCount="$OPTARG" ;;
    g) vmGroup="$OPTARG" ;;
    t) vmSubGroup="$OPTARG" ;;
    f) groupConfFile="$OPTARG" ;;
    h) usage ;;
  esac
done
shift $(($OPTIND-1))

tempConf=0
if [ -z ${groupConfFile} ] ; then
  [ $(nonNumeric ${vmCount}) -eq 1 ] && usage "-c needs numeric argument"
  [ -z "$vmName" ] && usage "-n <VM_name> is mandatory"
  groupConfFile=$(mktemp)
  echo "${vmName}:${vmCount}:${vmGroup}:${vmSubGroup}" > ${groupConfFile}
  tempConf=1
fi

for confLine in $(cat ${groupConfFile})
do
  vmName=$(echo "${confLine}" | cut -d : -f 1)
  vmCount=$(echo "${confLine}" | cut -d : -f 2)
  vmGroup=$(echo "${confLine}" | cut -d : -f 3)
  vmSubGroup=$(echo "${confLine}" | cut -d : -f 4)
  vm_instantiate ${vmName} ${vmCount} ${vmGroup} ${vmSubGroup}
done

[ ${tempConf} -eq 1 ] && rm ${groupConfFile}

