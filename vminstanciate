#!/usr/bin/env bash

usage() {
  echo "$@" >&2
  echo "usage : $(basename $0) -n <VM_NAME> -c <COUNT> [options]
  -n <VM_NAME> : the name of the template to use (mandatory)
  -C <COUNT> : number of clones to create (default ${vmCount})
  -g <GROUP> : group in which the newly created vm will be (default ${vmGroup})
  -t <TYPE> : subgroup definition (default ${vmSubGroup})
              ansible playbook TYPE.yml will be applied. Not yet implemented.
  -h : display this help" >&2
  exit
}

realMe=$(readlink -e $0)
realDir=$(dirname ${realMe})
libDir=lib
libName=cm_lib
[ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
[ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

vmName=
while getopts n:C:g:t:h name
do
  case $name in
    n) vmName="$OPTARG" ;;
    C) vmCount="$OPTARG" ;;
    g) vmGroup="$OPTARG" ;;
    t) vmSubGroup="$OPTARG" ;;
    h) usage ;;
  esac
done
shift $(($OPTIND-1))

[ $(nonNumeric ${vmCount}) -eq 1 ] && usage "-c needs numeric argument"
[ -z "$vmName" ] && usage "-n <VM_name> is mandatory"
vmTemplate=${vmName}
vmTemplateGroup=${vmCreateGroup}
. <(sed 's/^/tmplt_/' ${vmBaseDir}/${vmTemplateGroup}/${vmTemplate}/${vmTemplate}.conf)

vmList=
vmDir=${vmBaseDir}/${vmGroup}/${vmSubGroup}
for vmNum in $(seq 1 ${vmCount})
do
  vmName=$(uuidgen)
  [ -f ${vmDir}/${vmName} ] || mkdir -p ${vmDir}/${vmName}
  vmDisk=$(vm_clone_disk ${vmTemplateGroup} ${vmTemplate} ${vmGroup}/${vmSubGroup} ${vmName})
  cat > ${vmDir}/${vmName}/${vmName}.conf <<EOF
vmName=${vmName}
vmMem=${tmplt_vmMem}
vmCpu=${tmplt_vmCpu}
vmDisk=${vmDisk}
EOF
  vm_run ${vmName} ${vmGroup}/${vmSubGroup} none
  vmList="${vmList} ${vmName}"
done

for vmName in ${vmList}
do
  vm_ssh $(vm_ip ${vmName}) -o strictHostKeyChecking=false "echo ${vmName} > /etc/hostname ; hostname -F /etc/hostname ; reboot" >/dev/null 2>&1 &
done

wait
